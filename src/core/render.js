// src/core/render.js
import { Markup } from 'telegraf';

export async function renderByName(name, ctx, session) {
  switch (name) {
    case 'assembliesList': return assembliesList(ctx, session);
    case 'partsPaged': return partsPaged(ctx, session);
    case 'crossesList': return crossesList(ctx, session);
    case 'partCardWithButtons': return partCardWithButtons(ctx, session);
    case 'cartConfirm': return cartConfirm(ctx, session);
    default: return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä: ' + name);
  }
}

async function assembliesList(ctx, session) {
  const { assemblies = [] } = session.data.getAssembliesByVIN || {};
  if (!assemblies.length) return ctx.reply('–£–∑–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —ç—Ç–æ–º—É VIN.');

  const buttons = assemblies.slice(0, 24).map(a =>
    Markup.button.callback(a.name || `–£–∑–µ–ª ${a.id}`, `asm:${a.id}`)
  );
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª:', Markup.inlineKeyboard(chunk(buttons, 2)));
}

async function partsPaged(ctx, session) {
  const { items = [] } = session.data.getPartsByAssembly || {};
  if (!items.length) return ctx.reply('–î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞.');

  // –ø—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const lines = items.slice(0, 10).map((p, i) =>
    `${i + 1}. ${p.oem} ‚Äî ${p.brand ? p.brand + ' ‚Ä¢ ' : ''}${p.name || ''}`
  ).join('\n');

  const rows = items.slice(0, 10).map(p => ([
    Markup.button.callback('üîÅ –ê–Ω–∞–ª–æ–≥–∏', `x:${p.oem}`),
    Markup.button.callback('üõí –í –∫–æ—Ä–∑–∏–Ω—É', `cart:${p.oem}`)
  ]));

  await ctx.reply(lines, Markup.inlineKeyboard(rows));
}

async function crossesList(ctx, session) {
  const { crosses = [] } = session.data.getCrossesByOEM || {};
  if (!crosses.length) return ctx.reply('–ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');

  const lines = crosses.slice(0, 20).map((c, i) =>
    `${i + 1}. ${c.brand ? c.brand + ' ' : ''}${c.oem}${c.name ? ' ‚Äî ' + c.name : ''}`
  ).join('\n');

  await ctx.reply(lines);
}

async function partCardWithButtons(ctx, session) {
  const p = session.data.getPartByOEM;
  if (!p) return ctx.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É.');

  const text = [
    `OEM: ${p.oem || '‚Äî'}`,
    `–ë—Ä–µ–Ω–¥: ${p.brand || '‚Äî'}`,
    `–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name || '‚Äî'}`
  ].join('\n');

  await ctx.reply(
    text,
    Markup.inlineKeyboard([
      [Markup.button.callback('üîÅ –ê–Ω–∞–ª–æ–≥–∏', 'analogs')],
      [Markup.button.callback('üõí –í –∫–æ—Ä–∑–∏–Ω—É', `cart:${p.oem || ''}`)]
    ])
  );
}

async function cartConfirm(ctx, session) {
  const last = session.lastCallback || '';
  const oem = last.startsWith('cart:') ? last.slice(5) : '‚Äî';
  await ctx.reply(`–î–æ–±–∞–≤–∏–ª –≤ –∫–æ—Ä–∑–∏–Ω—É: ${oem}`);
}

function chunk(arr, n) { const out = []; for (let i=0;i<arr.length;i+=n) out.push(arr.slice(i,i+n)); return out; }
